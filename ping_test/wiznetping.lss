
wiznetping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  00000c78  00000d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800296  00800296  00000ea2  2**0
                  ALLOC
  3 .stab         00002a30  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001509  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 39       	cpi	r26, 0x96	; 150
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a6 e9       	ldi	r26, 0x96	; 150
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 39       	cpi	r26, 0x9C	; 156
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
  9e:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
#define SIPR 0x000F   // Source IP Address: 0x000F to 0x0012
#define RMSR 0x001A   // RX Memory Size Register
#define TMSR 0x001B   // TX Memory Size Register
void uart_init(void)
{
  UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
  a6:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		// enable Rx & Tx
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	       // config USART; 8N1
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24
  bc:	08 95       	ret

000000be <uart_flush>:
}
void uart_flush(void)
{
  be:	02 c0       	rjmp	.+4      	; 0xc4 <uart_flush+0x6>
  unsigned char dummy;
  while (UCSR0A & (1<<RXC0)) dummy = UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6
  c4:	80 91 c0 00 	lds	r24, 0x00C0
  c8:	87 fd       	sbrc	r24, 7
  ca:	fa cf       	rjmp	.-12     	; 0xc0 <uart_flush+0x2>
  cc:	08 95       	ret

000000ce <uart_putch>:
}
int uart_putch(char ch,FILE *stream)
{
  ce:	1f 93       	push	r17
  d0:	18 2f       	mov	r17, r24
   if (ch == '\n')
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	19 f4       	brne	.+6      	; 0xdc <uart_putch+0xe>
    uart_putch('\r', stream);
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	0e 94 67 00 	call	0xce	; 0xce <uart_putch>
   while (!(UCSR0A & (1<<UDRE0)));
  dc:	80 91 c0 00 	lds	r24, 0x00C0
  e0:	85 ff       	sbrs	r24, 5
  e2:	fc cf       	rjmp	.-8      	; 0xdc <uart_putch+0xe>
   UDR0=ch;
  e4:	10 93 c6 00 	sts	0x00C6, r17
   return 0;
}
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	1f 91       	pop	r17
  ee:	08 95       	ret

000000f0 <uart_getch>:
int uart_getch(FILE *stream)
{
  f0:	1f 93       	push	r17
  f2:	bc 01       	movw	r22, r24
   unsigned char ch;
   while (!(UCSR0A & (1<<RXC0)));
  f4:	80 91 c0 00 	lds	r24, 0x00C0
  f8:	87 ff       	sbrs	r24, 7
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <uart_getch+0x4>
   ch=UDR0;  
  fc:	10 91 c6 00 	lds	r17, 0x00C6

   /* Echo the Output Back to terminal */
   uart_putch(ch,stream);       
 100:	81 2f       	mov	r24, r17
 102:	0e 94 67 00 	call	0xce	; 0xce <uart_putch>

   return ch;
}
 106:	81 2f       	mov	r24, r17
 108:	99 27       	eor	r25, r25
 10a:	1f 91       	pop	r17
 10c:	08 95       	ret

0000010e <ansi_cl>:
void ansi_cl(void)
{
  // ANSI clear screen: cl=\E[H\E[J
  putchar(27);
 10e:	60 91 98 02 	lds	r22, 0x0298
 112:	70 91 99 02 	lds	r23, 0x0299
 116:	8b e1       	ldi	r24, 0x1B	; 27
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar('[');
 11e:	60 91 98 02 	lds	r22, 0x0298
 122:	70 91 99 02 	lds	r23, 0x0299
 126:	8b e5       	ldi	r24, 0x5B	; 91
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar('H');
 12e:	60 91 98 02 	lds	r22, 0x0298
 132:	70 91 99 02 	lds	r23, 0x0299
 136:	88 e4       	ldi	r24, 0x48	; 72
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar(27);
 13e:	60 91 98 02 	lds	r22, 0x0298
 142:	70 91 99 02 	lds	r23, 0x0299
 146:	8b e1       	ldi	r24, 0x1B	; 27
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar('[');
 14e:	60 91 98 02 	lds	r22, 0x0298
 152:	70 91 99 02 	lds	r23, 0x0299
 156:	8b e5       	ldi	r24, 0x5B	; 91
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar('J');
 15e:	60 91 98 02 	lds	r22, 0x0298
 162:	70 91 99 02 	lds	r23, 0x0299
 166:	8a e4       	ldi	r24, 0x4A	; 74
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 16e:	08 95       	ret

00000170 <ansi_me>:
}
void ansi_me(void)
{
  // ANSI turn off all attribute: me=\E[0m
  putchar(27);
 170:	60 91 98 02 	lds	r22, 0x0298
 174:	70 91 99 02 	lds	r23, 0x0299
 178:	8b e1       	ldi	r24, 0x1B	; 27
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar('[');
 180:	60 91 98 02 	lds	r22, 0x0298
 184:	70 91 99 02 	lds	r23, 0x0299
 188:	8b e5       	ldi	r24, 0x5B	; 91
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar('0');
 190:	60 91 98 02 	lds	r22, 0x0298
 194:	70 91 99 02 	lds	r23, 0x0299
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
  putchar('m');
 1a0:	60 91 98 02 	lds	r22, 0x0298
 1a4:	70 91 99 02 	lds	r23, 0x0299
 1a8:	8d e6       	ldi	r24, 0x6D	; 109
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 1b0:	08 95       	ret

000001b2 <SPI_Write>:
}
void SPI_Write(unsigned int addr,unsigned char data)
{
 1b2:	9c 01       	movw	r18, r24
  // Activate the CS pin
  SPI_PORT &= ~(1<<SPI_CS);
 1b4:	2a 98       	cbi	0x05, 2	; 5
  // Start Wiznet W5100 Write OpCode transmission
  SPDR = WIZNET_WRITE_OPCODE;
 1b6:	80 ef       	ldi	r24, 0xF0	; 240
 1b8:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
 1ba:	0d b4       	in	r0, 0x2d	; 45
 1bc:	07 fe       	sbrs	r0, 7
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <SPI_Write+0x8>
  // Start Wiznet W5100 Address High Bytes transmission
  SPDR = (addr & 0xFF00) >> 8;
 1c0:	83 2f       	mov	r24, r19
 1c2:	99 27       	eor	r25, r25
 1c4:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
 1c6:	0d b4       	in	r0, 0x2d	; 45
 1c8:	07 fe       	sbrs	r0, 7
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <SPI_Write+0x14>
  // Start Wiznet W5100 Address Low Bytes transmission
  SPDR = addr & 0x00FF;
 1cc:	2e bd       	out	0x2e, r18	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));   
 1ce:	0d b4       	in	r0, 0x2d	; 45
 1d0:	07 fe       	sbrs	r0, 7
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <SPI_Write+0x1c>

  // Start Data transmission
  SPDR = data;
 1d4:	6e bd       	out	0x2e, r22	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
 1d6:	0d b4       	in	r0, 0x2d	; 45
 1d8:	07 fe       	sbrs	r0, 7
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <SPI_Write+0x24>
  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
 1dc:	2a 9a       	sbi	0x05, 2	; 5
 1de:	08 95       	ret

000001e0 <SPI_Read>:
}
unsigned char SPI_Read(unsigned int addr)
{
 1e0:	9c 01       	movw	r18, r24
  // Activate the CS pin
  SPI_PORT &= ~(1<<SPI_CS);
 1e2:	2a 98       	cbi	0x05, 2	; 5
  // Start Wiznet W5100 Read OpCode transmission
  SPDR = WIZNET_READ_OPCODE;
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
 1e8:	0d b4       	in	r0, 0x2d	; 45
 1ea:	07 fe       	sbrs	r0, 7
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <SPI_Read+0x8>
  // Start Wiznet W5100 Address High Bytes transmission
  SPDR = (addr & 0xFF00) >> 8;
 1ee:	83 2f       	mov	r24, r19
 1f0:	99 27       	eor	r25, r25
 1f2:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
 1f4:	0d b4       	in	r0, 0x2d	; 45
 1f6:	07 fe       	sbrs	r0, 7
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <SPI_Read+0x14>
  // Start Wiznet W5100 Address Low Bytes transmission
  SPDR = addr & 0x00FF;
 1fa:	2e bd       	out	0x2e, r18	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));   
 1fc:	0d b4       	in	r0, 0x2d	; 45
 1fe:	07 fe       	sbrs	r0, 7
 200:	fd cf       	rjmp	.-6      	; 0x1fc <SPI_Read+0x1c>

  // Send Dummy transmission for reading the data
  SPDR = 0x00;
 202:	1e bc       	out	0x2e, r1	; 46
  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));  
 204:	0d b4       	in	r0, 0x2d	; 45
 206:	07 fe       	sbrs	r0, 7
 208:	fd cf       	rjmp	.-6      	; 0x204 <SPI_Read+0x24>

  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
 20a:	2a 9a       	sbi	0x05, 2	; 5
  return(SPDR);
 20c:	8e b5       	in	r24, 0x2e	; 46
}
 20e:	99 27       	eor	r25, r25
 210:	08 95       	ret

00000212 <W5100_Init>:
void W5100_Init(void)
{
 212:	2f 92       	push	r2
 214:	3f 92       	push	r3
 216:	4f 92       	push	r4
 218:	5f 92       	push	r5
 21a:	6f 92       	push	r6
 21c:	7f 92       	push	r7
 21e:	8f 92       	push	r8
 220:	9f 92       	push	r9
 222:	af 92       	push	r10
 224:	bf 92       	push	r11
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
  unsigned char mac_addr[] = {0x00,0x16,0x36,0xDE,0x58,0xF6};
  unsigned char ip_addr[] = {192,168,2,10};
  unsigned char sub_mask[] = {255,255,255,0};
  unsigned char gtw_addr[] = {192,168,2,1};
  // Setting the Wiznet W5100 Mode Register: 0x0000
  SPI_Write(MR,0x80);            // MR = 0b10000000;
 236:	60 e8       	ldi	r22, 0x80	; 128
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 240:	4a ef       	ldi	r20, 0xFA	; 250
 242:	64 2e       	mov	r6, r20
 244:	71 2c       	mov	r7, r1
 246:	c3 01       	movw	r24, r6
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <W5100_Init+0x36>
  _delay_ms(1);
  printf("Reading MR: %d\n\n",SPI_Read(MR));
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 254:	99 27       	eor	r25, r25
 256:	9f 93       	push	r25
 258:	8f 93       	push	r24
 25a:	84 e1       	ldi	r24, 0x14	; 20
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	9f 93       	push	r25
 260:	8f 93       	push	r24
 262:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
  // Setting the Wiznet W5100 Gateway Address (GAR): 0x0001 to 0x0004
  printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],\
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9f 93       	push	r25
 26c:	8f 93       	push	r24
 26e:	c2 e0       	ldi	r28, 0x02	; 2
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	df 93       	push	r29
 274:	cf 93       	push	r28
 276:	38 ea       	ldi	r19, 0xA8	; 168
 278:	23 2e       	mov	r2, r19
 27a:	31 2c       	mov	r3, r1
 27c:	3f 92       	push	r3
 27e:	2f 92       	push	r2
 280:	20 ec       	ldi	r18, 0xC0	; 192
 282:	42 2e       	mov	r4, r18
 284:	51 2c       	mov	r5, r1
 286:	5f 92       	push	r5
 288:	4f 92       	push	r4
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	9f 93       	push	r25
 290:	8f 93       	push	r24
 292:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          gtw_addr[2],gtw_addr[3]);
  SPI_Write(GAR + 0,gtw_addr[0]);
 296:	60 ec       	ldi	r22, 0xC0	; 192
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(GAR + 1,gtw_addr[1]);
 2a0:	68 ea       	ldi	r22, 0xA8	; 168
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(GAR + 2,gtw_addr[2]);
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(GAR + 3,gtw_addr[3]);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
 2be:	c3 01       	movw	r24, r6
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <W5100_Init+0xae>
  _delay_ms(1);
  printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),\
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 2cc:	c8 2e       	mov	r12, r24
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 2d6:	e8 2e       	mov	r14, r24
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 2e0:	08 2f       	mov	r16, r24
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 2ea:	dd 24       	eor	r13, r13
 2ec:	df 92       	push	r13
 2ee:	cf 92       	push	r12
 2f0:	ff 24       	eor	r15, r15
 2f2:	ff 92       	push	r15
 2f4:	ef 92       	push	r14
 2f6:	11 27       	eor	r17, r17
 2f8:	1f 93       	push	r17
 2fa:	0f 93       	push	r16
 2fc:	99 27       	eor	r25, r25
 2fe:	9f 93       	push	r25
 300:	8f 93       	push	r24
 302:	8a e4       	ldi	r24, 0x4A	; 74
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	9f 93       	push	r25
 308:	8f 93       	push	r24
 30a:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          SPI_Read(GAR + 2),SPI_Read(GAR + 3));
  // Setting the Wiznet W5100 Source Address Register (SAR): 0x0009 to 0x000E
  printf("Setting Source Address %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",mac_addr[0],mac_addr[1],\
 30e:	86 ef       	ldi	r24, 0xF6	; 246
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	9f 93       	push	r25
 314:	8f 93       	push	r24
 316:	88 e5       	ldi	r24, 0x58	; 88
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	9f 93       	push	r25
 31c:	8f 93       	push	r24
 31e:	8e ed       	ldi	r24, 0xDE	; 222
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9f 93       	push	r25
 324:	8f 93       	push	r24
 326:	86 e3       	ldi	r24, 0x36	; 54
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	9f 93       	push	r25
 32c:	8f 93       	push	r24
 32e:	86 e1       	ldi	r24, 0x16	; 22
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	1f 92       	push	r1
 338:	1f 92       	push	r1
 33a:	85 e6       	ldi	r24, 0x65	; 101
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          mac_addr[2],mac_addr[3],mac_addr[4],mac_addr[5]);
  SPI_Write(SAR + 0,mac_addr[0]);
 346:	8d b7       	in	r24, 0x3d	; 61
 348:	9e b7       	in	r25, 0x3e	; 62
 34a:	86 96       	adiw	r24, 0x26	; 38
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	9e bf       	out	0x3e, r25	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	8d bf       	out	0x3d, r24	; 61
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	89 e0       	ldi	r24, 0x09	; 9
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SAR + 1,mac_addr[1]);
 360:	66 e1       	ldi	r22, 0x16	; 22
 362:	8a e0       	ldi	r24, 0x0A	; 10
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SAR + 2,mac_addr[2]);
 36a:	66 e3       	ldi	r22, 0x36	; 54
 36c:	8b e0       	ldi	r24, 0x0B	; 11
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SAR + 3,mac_addr[3]);
 374:	6e ed       	ldi	r22, 0xDE	; 222
 376:	8c e0       	ldi	r24, 0x0C	; 12
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SAR + 4,mac_addr[4]);
 37e:	68 e5       	ldi	r22, 0x58	; 88
 380:	8d e0       	ldi	r24, 0x0D	; 13
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SAR + 5,mac_addr[5]);
 388:	66 ef       	ldi	r22, 0xF6	; 246
 38a:	8e e0       	ldi	r24, 0x0E	; 14
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
 392:	c3 01       	movw	r24, r6
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <W5100_Init+0x182>
  _delay_ms(1);
  printf("Reading SAR: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),\
 398:	8e e0       	ldi	r24, 0x0E	; 14
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 3a0:	88 2e       	mov	r8, r24
 3a2:	8d e0       	ldi	r24, 0x0D	; 13
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 3aa:	a8 2e       	mov	r10, r24
 3ac:	8c e0       	ldi	r24, 0x0C	; 12
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 3b4:	c8 2e       	mov	r12, r24
 3b6:	8b e0       	ldi	r24, 0x0B	; 11
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 3be:	e8 2e       	mov	r14, r24
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 3c8:	08 2f       	mov	r16, r24
 3ca:	89 e0       	ldi	r24, 0x09	; 9
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 3d2:	99 24       	eor	r9, r9
 3d4:	9f 92       	push	r9
 3d6:	8f 92       	push	r8
 3d8:	bb 24       	eor	r11, r11
 3da:	bf 92       	push	r11
 3dc:	af 92       	push	r10
 3de:	dd 24       	eor	r13, r13
 3e0:	df 92       	push	r13
 3e2:	cf 92       	push	r12
 3e4:	ff 24       	eor	r15, r15
 3e6:	ff 92       	push	r15
 3e8:	ef 92       	push	r14
 3ea:	11 27       	eor	r17, r17
 3ec:	1f 93       	push	r17
 3ee:	0f 93       	push	r16
 3f0:	99 27       	eor	r25, r25
 3f2:	9f 93       	push	r25
 3f4:	8f 93       	push	r24
 3f6:	8b e9       	ldi	r24, 0x9B	; 155
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	9f 93       	push	r25
 3fc:	8f 93       	push	r24
 3fe:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          SPI_Read(SAR + 2),SPI_Read(SAR + 3),SPI_Read(SAR + 4),SPI_Read(SAR + 5));
  // Setting the Wiznet W5100 Sub Mask Address (SUBR): 0x0005 to 0x0008
  printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],\
 402:	1f 92       	push	r1
 404:	1f 92       	push	r1
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	9f 93       	push	r25
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	8f 93       	push	r24
 416:	88 ec       	ldi	r24, 0xC8	; 200
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          sub_mask[2],sub_mask[3]);
  SPI_Write(SUBR + 0,sub_mask[0]);
 422:	6f ef       	ldi	r22, 0xFF	; 255
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SUBR + 1,sub_mask[1]);
 42c:	6f ef       	ldi	r22, 0xFF	; 255
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SUBR + 2,sub_mask[2]);
 436:	6f ef       	ldi	r22, 0xFF	; 255
 438:	87 e0       	ldi	r24, 0x07	; 7
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SUBR + 3,sub_mask[3]);
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	88 e0       	ldi	r24, 0x08	; 8
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
 44a:	c3 01       	movw	r24, r6
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <W5100_Init+0x23a>
  _delay_ms(1);
  printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),\
 450:	88 e0       	ldi	r24, 0x08	; 8
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 458:	c8 2e       	mov	r12, r24
 45a:	87 e0       	ldi	r24, 0x07	; 7
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 462:	e8 2e       	mov	r14, r24
 464:	86 e0       	ldi	r24, 0x06	; 6
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 46c:	08 2f       	mov	r16, r24
 46e:	85 e0       	ldi	r24, 0x05	; 5
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 476:	dd 24       	eor	r13, r13
 478:	df 92       	push	r13
 47a:	cf 92       	push	r12
 47c:	ff 24       	eor	r15, r15
 47e:	ff 92       	push	r15
 480:	ef 92       	push	r14
 482:	11 27       	eor	r17, r17
 484:	1f 93       	push	r17
 486:	0f 93       	push	r16
 488:	99 27       	eor	r25, r25
 48a:	9f 93       	push	r25
 48c:	8f 93       	push	r24
 48e:	8e ee       	ldi	r24, 0xEE	; 238
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	9f 93       	push	r25
 494:	8f 93       	push	r24
 496:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
  // Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
  printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],\
 49a:	8d b7       	in	r24, 0x3d	; 61
 49c:	9e b7       	in	r25, 0x3e	; 62
 49e:	82 96       	adiw	r24, 0x22	; 34
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	9e bf       	out	0x3e, r25	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	8d bf       	out	0x3d, r24	; 61
 4aa:	8a e0       	ldi	r24, 0x0A	; 10
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	9f 93       	push	r25
 4b0:	8f 93       	push	r24
 4b2:	df 93       	push	r29
 4b4:	cf 93       	push	r28
 4b6:	3f 92       	push	r3
 4b8:	2f 92       	push	r2
 4ba:	5f 92       	push	r5
 4bc:	4f 92       	push	r4
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	9f 93       	push	r25
 4c4:	8f 93       	push	r24
 4c6:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          ip_addr[2],ip_addr[3]);
  SPI_Write(SIPR + 0,ip_addr[0]);
 4ca:	60 ec       	ldi	r22, 0xC0	; 192
 4cc:	8f e0       	ldi	r24, 0x0F	; 15
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SIPR + 1,ip_addr[1]);
 4d4:	68 ea       	ldi	r22, 0xA8	; 168
 4d6:	80 e1       	ldi	r24, 0x10	; 16
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SIPR + 2,ip_addr[2]);
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	81 e1       	ldi	r24, 0x11	; 17
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(SIPR + 3,ip_addr[3]);
 4e8:	6a e0       	ldi	r22, 0x0A	; 10
 4ea:	82 e1       	ldi	r24, 0x12	; 18
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
 4f2:	c3 01       	movw	r24, r6
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <W5100_Init+0x2e2>
  _delay_ms(1);
  printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),\
 4f8:	82 e1       	ldi	r24, 0x12	; 18
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 500:	c8 2e       	mov	r12, r24
 502:	81 e1       	ldi	r24, 0x11	; 17
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 50a:	e8 2e       	mov	r14, r24
 50c:	80 e1       	ldi	r24, 0x10	; 16
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 514:	08 2f       	mov	r16, r24
 516:	8f e0       	ldi	r24, 0x0F	; 15
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_Read>
 51e:	dd 24       	eor	r13, r13
 520:	df 92       	push	r13
 522:	cf 92       	push	r12
 524:	ff 24       	eor	r15, r15
 526:	ff 92       	push	r15
 528:	ef 92       	push	r14
 52a:	11 27       	eor	r17, r17
 52c:	1f 93       	push	r17
 52e:	0f 93       	push	r16
 530:	99 27       	eor	r25, r25
 532:	9f 93       	push	r25
 534:	8f 93       	push	r24
 536:	8a e2       	ldi	r24, 0x2A	; 42
 538:	92 e0       	ldi	r25, 0x02	; 2
 53a:	9f 93       	push	r25
 53c:	8f 93       	push	r24
 53e:	0e 94 35 03 	call	0x66a	; 0x66a <printf>
          SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));

  // Setting the Wiznet W5100 RX and TX Memory Size, we use 2KB for Rx/Tx 4 channels
  printf("Setting Wiznet RMSR and TMSR\n\n");
 542:	86 e4       	ldi	r24, 0x46	; 70
 544:	92 e0       	ldi	r25, 0x02	; 2
 546:	0e 94 4e 03 	call	0x69c	; 0x69c <puts>
  SPI_Write(RMSR,0x55);
 54a:	65 e5       	ldi	r22, 0x55	; 85
 54c:	8a e1       	ldi	r24, 0x1A	; 26
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  SPI_Write(TMSR,0x55);
 554:	65 e5       	ldi	r22, 0x55	; 85
 556:	8b e1       	ldi	r24, 0x1B	; 27
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Write>
  printf("Done Wiznet W5100 Initialized!\n");
 55e:	84 e6       	ldi	r24, 0x64	; 100
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	0e 94 4e 03 	call	0x69c	; 0x69c <puts>
 566:	8d b7       	in	r24, 0x3d	; 61
 568:	9e b7       	in	r25, 0x3e	; 62
 56a:	44 96       	adiw	r24, 0x14	; 20
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	9e bf       	out	0x3e, r25	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	8d bf       	out	0x3d, r24	; 61
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	bf 90       	pop	r11
 588:	af 90       	pop	r10
 58a:	9f 90       	pop	r9
 58c:	8f 90       	pop	r8
 58e:	7f 90       	pop	r7
 590:	6f 90       	pop	r6
 592:	5f 90       	pop	r5
 594:	4f 90       	pop	r4
 596:	3f 90       	pop	r3
 598:	2f 90       	pop	r2
 59a:	08 95       	ret

0000059c <main>:
}
// Assign I/O stream to UART
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);
int main(void){
 59c:	cf ef       	ldi	r28, 0xFF	; 255
 59e:	d4 e0       	ldi	r29, 0x04	; 4
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	cd bf       	out	0x3d, r28	; 61
  // Set the PORTD as Output:
  DDRD=0xFF;
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	8a b9       	out	0x0a, r24	; 10
  PORTD=0x00;
 5a8:	1b b8       	out	0x0b, r1	; 11
   // Define Output/Input Stream
  stdout = stdin = &uart_str;
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	90 93 97 02 	sts	0x0297, r25
 5b2:	80 93 96 02 	sts	0x0296, r24
 5b6:	90 93 99 02 	sts	0x0299, r25
 5ba:	80 93 98 02 	sts	0x0298, r24
#define SIPR 0x000F   // Source IP Address: 0x000F to 0x0012
#define RMSR 0x001A   // RX Memory Size Register
#define TMSR 0x001B   // TX Memory Size Register
void uart_init(void)
{
  UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
 5be:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		// enable Rx & Tx
 5c8:	88 e1       	ldi	r24, 0x18	; 24
 5ca:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	       // config USART; 8N1
 5ce:	86 e0       	ldi	r24, 0x06	; 6
 5d0:	80 93 c2 00 	sts	0x00C2, r24
   // Define Output/Input Stream
  stdout = stdin = &uart_str;
  // Initial UART Peripheral
  uart_init();
  // Clear Screen
  ansi_me();
 5d4:	0e 94 b8 00 	call	0x170	; 0x170 <ansi_me>
  ansi_cl();
 5d8:	0e 94 87 00 	call	0x10e	; 0x10e <ansi_cl>
  ansi_me();
 5dc:	0e 94 b8 00 	call	0x170	; 0x170 <ansi_me>
  ansi_cl();
 5e0:	0e 94 87 00 	call	0x10e	; 0x10e <ansi_cl>
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <main+0x4e>
  UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	       // config USART; 8N1
}
void uart_flush(void)
{
  unsigned char dummy;
  while (UCSR0A & (1<<RXC0)) dummy = UDR0;
 5e6:	80 91 c6 00 	lds	r24, 0x00C6
 5ea:	80 91 c0 00 	lds	r24, 0x00C0
 5ee:	87 fd       	sbrc	r24, 7
 5f0:	fa cf       	rjmp	.-12     	; 0x5e6 <main+0x4a>
  ansi_me();
  ansi_cl();
  uart_flush();
  // Initial the AVR ATMega168/328 SPI Peripheral
  // Set MOSI (PORTB3),SCK (PORTB5) and PORTB2 (SS) as output, others as input
  SPI_DDR = (1<<PORTB3)|(1<<PORTB5)|(1<<PORTB2);
 5f2:	8c e2       	ldi	r24, 0x2C	; 44
 5f4:	84 b9       	out	0x04, r24	; 4
  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
 5f6:	2a 9a       	sbi	0x05, 2	; 5
  // Enable SPI, Master Mode 0, set the clock rate fck/2
  SPCR = (1<<SPE)|(1<<MSTR);
 5f8:	80 e5       	ldi	r24, 0x50	; 80
 5fa:	8c bd       	out	0x2c, r24	; 44
  SPSR |= (1<<SPI2X);
 5fc:	8d b5       	in	r24, 0x2d	; 45
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	8d bd       	out	0x2d, r24	; 45
  // Initial the Wiznet W5100
  printf("Wiznet W5100 Init\n\n");
 602:	83 e8       	ldi	r24, 0x83	; 131
 604:	92 e0       	ldi	r25, 0x02	; 2
 606:	0e 94 4e 03 	call	0x69c	; 0x69c <puts>
  W5100_Init();
 60a:	0e 94 09 01 	call	0x212	; 0x212 <W5100_Init>
 60e:	ff cf       	rjmp	.-2      	; 0x60e <main+0x72>

00000610 <fputc>:
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	8c 01       	movw	r16, r24
 61a:	eb 01       	movw	r28, r22
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	99 27       	eor	r25, r25
 620:	81 ff       	sbrs	r24, 1
 622:	1b c0       	rjmp	.+54     	; 0x65a <fputc+0x4a>
 624:	82 ff       	sbrs	r24, 2
 626:	0d c0       	rjmp	.+26     	; 0x642 <fputc+0x32>
 628:	2e 81       	ldd	r18, Y+6	; 0x06
 62a:	3f 81       	ldd	r19, Y+7	; 0x07
 62c:	8c 81       	ldd	r24, Y+4	; 0x04
 62e:	9d 81       	ldd	r25, Y+5	; 0x05
 630:	28 17       	cp	r18, r24
 632:	39 07       	cpc	r19, r25
 634:	64 f4       	brge	.+24     	; 0x64e <fputc+0x3e>
 636:	e8 81       	ld	r30, Y
 638:	f9 81       	ldd	r31, Y+1	; 0x01
 63a:	01 93       	st	Z+, r16
 63c:	f9 83       	std	Y+1, r31	; 0x01
 63e:	e8 83       	st	Y, r30
 640:	06 c0       	rjmp	.+12     	; 0x64e <fputc+0x3e>
 642:	e8 85       	ldd	r30, Y+8	; 0x08
 644:	f9 85       	ldd	r31, Y+9	; 0x09
 646:	80 2f       	mov	r24, r16
 648:	09 95       	icall
 64a:	89 2b       	or	r24, r25
 64c:	31 f4       	brne	.+12     	; 0x65a <fputc+0x4a>
 64e:	8e 81       	ldd	r24, Y+6	; 0x06
 650:	9f 81       	ldd	r25, Y+7	; 0x07
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	9f 83       	std	Y+7, r25	; 0x07
 656:	8e 83       	std	Y+6, r24	; 0x06
 658:	02 c0       	rjmp	.+4      	; 0x65e <fputc+0x4e>
 65a:	0f ef       	ldi	r16, 0xFF	; 255
 65c:	1f ef       	ldi	r17, 0xFF	; 255
 65e:	c8 01       	movw	r24, r16
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <printf>:
 66a:	a2 e0       	ldi	r26, 0x02	; 2
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	eb e3       	ldi	r30, 0x3B	; 59
 670:	f3 e0       	ldi	r31, 0x03	; 3
 672:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__prologue_saves__+0x20>
 676:	e7 e0       	ldi	r30, 0x07	; 7
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	ec 0f       	add	r30, r28
 67c:	fd 1f       	adc	r31, r29
 67e:	61 91       	ld	r22, Z+
 680:	71 91       	ld	r23, Z+
 682:	fa 83       	std	Y+2, r31	; 0x02
 684:	e9 83       	std	Y+1, r30	; 0x01
 686:	af 01       	movw	r20, r30
 688:	80 91 98 02 	lds	r24, 0x0298
 68c:	90 91 99 02 	lds	r25, 0x0299
 690:	0e 94 81 03 	call	0x702	; 0x702 <vfprintf>
 694:	e2 e0       	ldi	r30, 0x02	; 2
 696:	22 96       	adiw	r28, 0x02	; 2
 698:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__epilogue_restores__+0x20>

0000069c <puts>:
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	8c 01       	movw	r16, r24
 6a6:	e0 91 98 02 	lds	r30, 0x0298
 6aa:	f0 91 99 02 	lds	r31, 0x0299
 6ae:	83 81       	ldd	r24, Z+3	; 0x03
 6b0:	81 ff       	sbrs	r24, 1
 6b2:	1f c0       	rjmp	.+62     	; 0x6f2 <puts+0x56>
 6b4:	c0 e0       	ldi	r28, 0x00	; 0
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
 6b8:	0a c0       	rjmp	.+20     	; 0x6ce <puts+0x32>
 6ba:	fd 01       	movw	r30, r26
 6bc:	20 85       	ldd	r18, Z+8	; 0x08
 6be:	31 85       	ldd	r19, Z+9	; 0x09
 6c0:	bd 01       	movw	r22, r26
 6c2:	f9 01       	movw	r30, r18
 6c4:	09 95       	icall
 6c6:	89 2b       	or	r24, r25
 6c8:	11 f0       	breq	.+4      	; 0x6ce <puts+0x32>
 6ca:	cf ef       	ldi	r28, 0xFF	; 255
 6cc:	df ef       	ldi	r29, 0xFF	; 255
 6ce:	f8 01       	movw	r30, r16
 6d0:	81 91       	ld	r24, Z+
 6d2:	8f 01       	movw	r16, r30
 6d4:	a0 91 98 02 	lds	r26, 0x0298
 6d8:	b0 91 99 02 	lds	r27, 0x0299
 6dc:	88 23       	and	r24, r24
 6de:	69 f7       	brne	.-38     	; 0x6ba <puts+0x1e>
 6e0:	fd 01       	movw	r30, r26
 6e2:	20 85       	ldd	r18, Z+8	; 0x08
 6e4:	31 85       	ldd	r19, Z+9	; 0x09
 6e6:	bd 01       	movw	r22, r26
 6e8:	8a e0       	ldi	r24, 0x0A	; 10
 6ea:	f9 01       	movw	r30, r18
 6ec:	09 95       	icall
 6ee:	89 2b       	or	r24, r25
 6f0:	11 f0       	breq	.+4      	; 0x6f6 <puts+0x5a>
 6f2:	cf ef       	ldi	r28, 0xFF	; 255
 6f4:	df ef       	ldi	r29, 0xFF	; 255
 6f6:	ce 01       	movw	r24, r28
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	08 95       	ret

00000702 <vfprintf>:
 702:	ab e0       	ldi	r26, 0x0B	; 11
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e7 e8       	ldi	r30, 0x87	; 135
 708:	f3 e0       	ldi	r31, 0x03	; 3
 70a:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__prologue_saves__+0x4>
 70e:	2c 01       	movw	r4, r24
 710:	5b 01       	movw	r10, r22
 712:	8a 01       	movw	r16, r20
 714:	fc 01       	movw	r30, r24
 716:	17 82       	std	Z+7, r1	; 0x07
 718:	16 82       	std	Z+6, r1	; 0x06
 71a:	83 81       	ldd	r24, Z+3	; 0x03
 71c:	81 fd       	sbrc	r24, 1
 71e:	04 c0       	rjmp	.+8      	; 0x728 <vfprintf+0x26>
 720:	8f ef       	ldi	r24, 0xFF	; 255
 722:	9f ef       	ldi	r25, 0xFF	; 255
 724:	f9 c1       	rjmp	.+1010   	; 0xb18 <vfprintf+0x416>
 726:	83 01       	movw	r16, r6
 728:	f2 01       	movw	r30, r4
 72a:	33 81       	ldd	r19, Z+3	; 0x03
 72c:	f5 01       	movw	r30, r10
 72e:	33 fd       	sbrc	r19, 3
 730:	85 91       	lpm	r24, Z+
 732:	33 ff       	sbrs	r19, 3
 734:	81 91       	ld	r24, Z+
 736:	5f 01       	movw	r10, r30
 738:	88 23       	and	r24, r24
 73a:	09 f4       	brne	.+2      	; 0x73e <vfprintf+0x3c>
 73c:	e7 c1       	rjmp	.+974    	; 0xb0c <vfprintf+0x40a>
 73e:	85 32       	cpi	r24, 0x25	; 37
 740:	39 f4       	brne	.+14     	; 0x750 <vfprintf+0x4e>
 742:	33 fd       	sbrc	r19, 3
 744:	85 91       	lpm	r24, Z+
 746:	33 ff       	sbrs	r19, 3
 748:	81 91       	ld	r24, Z+
 74a:	5f 01       	movw	r10, r30
 74c:	85 32       	cpi	r24, 0x25	; 37
 74e:	91 f4       	brne	.+36     	; 0x774 <vfprintf+0x72>
 750:	b2 01       	movw	r22, r4
 752:	99 27       	eor	r25, r25
 754:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 758:	e7 cf       	rjmp	.-50     	; 0x728 <vfprintf+0x26>
 75a:	98 2f       	mov	r25, r24
 75c:	ff e1       	ldi	r31, 0x1F	; 31
 75e:	ff 15       	cp	r31, r15
 760:	f8 f0       	brcs	.+62     	; 0x7a0 <vfprintf+0x9e>
 762:	9b 32       	cpi	r25, 0x2B	; 43
 764:	91 f0       	breq	.+36     	; 0x78a <vfprintf+0x88>
 766:	9c 32       	cpi	r25, 0x2C	; 44
 768:	50 f4       	brcc	.+20     	; 0x77e <vfprintf+0x7c>
 76a:	90 32       	cpi	r25, 0x20	; 32
 76c:	81 f0       	breq	.+32     	; 0x78e <vfprintf+0x8c>
 76e:	93 32       	cpi	r25, 0x23	; 35
 770:	b9 f4       	brne	.+46     	; 0x7a0 <vfprintf+0x9e>
 772:	13 c0       	rjmp	.+38     	; 0x79a <vfprintf+0x98>
 774:	98 2f       	mov	r25, r24
 776:	ff 24       	eor	r15, r15
 778:	cc 24       	eor	r12, r12
 77a:	88 24       	eor	r8, r8
 77c:	f2 cf       	rjmp	.-28     	; 0x762 <vfprintf+0x60>
 77e:	9d 32       	cpi	r25, 0x2D	; 45
 780:	49 f0       	breq	.+18     	; 0x794 <vfprintf+0x92>
 782:	90 33       	cpi	r25, 0x30	; 48
 784:	69 f4       	brne	.+26     	; 0x7a0 <vfprintf+0x9e>
 786:	21 e0       	ldi	r18, 0x01	; 1
 788:	28 c0       	rjmp	.+80     	; 0x7da <vfprintf+0xd8>
 78a:	42 e0       	ldi	r20, 0x02	; 2
 78c:	f4 2a       	or	r15, r20
 78e:	54 e0       	ldi	r21, 0x04	; 4
 790:	f5 2a       	or	r15, r21
 792:	2c c0       	rjmp	.+88     	; 0x7ec <vfprintf+0xea>
 794:	88 e0       	ldi	r24, 0x08	; 8
 796:	f8 2a       	or	r15, r24
 798:	29 c0       	rjmp	.+82     	; 0x7ec <vfprintf+0xea>
 79a:	e0 e1       	ldi	r30, 0x10	; 16
 79c:	fe 2a       	or	r15, r30
 79e:	26 c0       	rjmp	.+76     	; 0x7ec <vfprintf+0xea>
 7a0:	f7 fc       	sbrc	r15, 7
 7a2:	2e c0       	rjmp	.+92     	; 0x800 <vfprintf+0xfe>
 7a4:	29 2f       	mov	r18, r25
 7a6:	20 53       	subi	r18, 0x30	; 48
 7a8:	2a 30       	cpi	r18, 0x0A	; 10
 7aa:	90 f4       	brcc	.+36     	; 0x7d0 <vfprintf+0xce>
 7ac:	f6 fe       	sbrs	r15, 6
 7ae:	07 c0       	rjmp	.+14     	; 0x7be <vfprintf+0xbc>
 7b0:	8a e0       	ldi	r24, 0x0A	; 10
 7b2:	88 9e       	mul	r8, r24
 7b4:	c0 01       	movw	r24, r0
 7b6:	11 24       	eor	r1, r1
 7b8:	82 2e       	mov	r8, r18
 7ba:	88 0e       	add	r8, r24
 7bc:	17 c0       	rjmp	.+46     	; 0x7ec <vfprintf+0xea>
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	c8 9e       	mul	r12, r24
 7c2:	c0 01       	movw	r24, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	c2 2e       	mov	r12, r18
 7c8:	c8 0e       	add	r12, r24
 7ca:	f0 e2       	ldi	r31, 0x20	; 32
 7cc:	ff 2a       	or	r15, r31
 7ce:	0e c0       	rjmp	.+28     	; 0x7ec <vfprintf+0xea>
 7d0:	9e 32       	cpi	r25, 0x2E	; 46
 7d2:	29 f4       	brne	.+10     	; 0x7de <vfprintf+0xdc>
 7d4:	f6 fc       	sbrc	r15, 6
 7d6:	9a c1       	rjmp	.+820    	; 0xb0c <vfprintf+0x40a>
 7d8:	20 e4       	ldi	r18, 0x40	; 64
 7da:	f2 2a       	or	r15, r18
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <vfprintf+0xea>
 7de:	9c 36       	cpi	r25, 0x6C	; 108
 7e0:	19 f4       	brne	.+6      	; 0x7e8 <vfprintf+0xe6>
 7e2:	40 e8       	ldi	r20, 0x80	; 128
 7e4:	f4 2a       	or	r15, r20
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0xea>
 7e8:	98 36       	cpi	r25, 0x68	; 104
 7ea:	51 f4       	brne	.+20     	; 0x800 <vfprintf+0xfe>
 7ec:	f5 01       	movw	r30, r10
 7ee:	33 fd       	sbrc	r19, 3
 7f0:	85 91       	lpm	r24, Z+
 7f2:	33 ff       	sbrs	r19, 3
 7f4:	81 91       	ld	r24, Z+
 7f6:	5f 01       	movw	r10, r30
 7f8:	88 23       	and	r24, r24
 7fa:	09 f0       	breq	.+2      	; 0x7fe <vfprintf+0xfc>
 7fc:	ae cf       	rjmp	.-164    	; 0x75a <vfprintf+0x58>
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	89 2f       	mov	r24, r25
 802:	85 54       	subi	r24, 0x45	; 69
 804:	83 30       	cpi	r24, 0x03	; 3
 806:	18 f0       	brcs	.+6      	; 0x80e <vfprintf+0x10c>
 808:	80 52       	subi	r24, 0x20	; 32
 80a:	83 30       	cpi	r24, 0x03	; 3
 80c:	38 f4       	brcc	.+14     	; 0x81c <vfprintf+0x11a>
 80e:	24 e0       	ldi	r18, 0x04	; 4
 810:	62 2e       	mov	r6, r18
 812:	71 2c       	mov	r7, r1
 814:	60 0e       	add	r6, r16
 816:	71 1e       	adc	r7, r17
 818:	8f e3       	ldi	r24, 0x3F	; 63
 81a:	0f c0       	rjmp	.+30     	; 0x83a <vfprintf+0x138>
 81c:	93 36       	cpi	r25, 0x63	; 99
 81e:	31 f0       	breq	.+12     	; 0x82c <vfprintf+0x12a>
 820:	93 37       	cpi	r25, 0x73	; 115
 822:	99 f0       	breq	.+38     	; 0x84a <vfprintf+0x148>
 824:	93 35       	cpi	r25, 0x53	; 83
 826:	09 f0       	breq	.+2      	; 0x82a <vfprintf+0x128>
 828:	62 c0       	rjmp	.+196    	; 0x8ee <vfprintf+0x1ec>
 82a:	26 c0       	rjmp	.+76     	; 0x878 <vfprintf+0x176>
 82c:	92 e0       	ldi	r25, 0x02	; 2
 82e:	69 2e       	mov	r6, r25
 830:	71 2c       	mov	r7, r1
 832:	60 0e       	add	r6, r16
 834:	71 1e       	adc	r7, r17
 836:	f8 01       	movw	r30, r16
 838:	80 81       	ld	r24, Z
 83a:	89 83       	std	Y+1, r24	; 0x01
 83c:	8e 01       	movw	r16, r28
 83e:	0f 5f       	subi	r16, 0xFF	; 255
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	88 2e       	mov	r8, r24
 846:	91 2c       	mov	r9, r1
 848:	13 c0       	rjmp	.+38     	; 0x870 <vfprintf+0x16e>
 84a:	b2 e0       	ldi	r27, 0x02	; 2
 84c:	6b 2e       	mov	r6, r27
 84e:	71 2c       	mov	r7, r1
 850:	60 0e       	add	r6, r16
 852:	71 1e       	adc	r7, r17
 854:	f8 01       	movw	r30, r16
 856:	00 81       	ld	r16, Z
 858:	11 81       	ldd	r17, Z+1	; 0x01
 85a:	f6 fc       	sbrc	r15, 6
 85c:	03 c0       	rjmp	.+6      	; 0x864 <vfprintf+0x162>
 85e:	6f ef       	ldi	r22, 0xFF	; 255
 860:	7f ef       	ldi	r23, 0xFF	; 255
 862:	02 c0       	rjmp	.+4      	; 0x868 <vfprintf+0x166>
 864:	68 2d       	mov	r22, r8
 866:	77 27       	eor	r23, r23
 868:	c8 01       	movw	r24, r16
 86a:	0e 94 9b 05 	call	0xb36	; 0xb36 <strnlen>
 86e:	4c 01       	movw	r8, r24
 870:	af e7       	ldi	r26, 0x7F	; 127
 872:	da 2e       	mov	r13, r26
 874:	df 20       	and	r13, r15
 876:	16 c0       	rjmp	.+44     	; 0x8a4 <vfprintf+0x1a2>
 878:	f2 e0       	ldi	r31, 0x02	; 2
 87a:	6f 2e       	mov	r6, r31
 87c:	71 2c       	mov	r7, r1
 87e:	60 0e       	add	r6, r16
 880:	71 1e       	adc	r7, r17
 882:	f8 01       	movw	r30, r16
 884:	00 81       	ld	r16, Z
 886:	11 81       	ldd	r17, Z+1	; 0x01
 888:	f6 fc       	sbrc	r15, 6
 88a:	03 c0       	rjmp	.+6      	; 0x892 <vfprintf+0x190>
 88c:	6f ef       	ldi	r22, 0xFF	; 255
 88e:	7f ef       	ldi	r23, 0xFF	; 255
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x194>
 892:	68 2d       	mov	r22, r8
 894:	77 27       	eor	r23, r23
 896:	c8 01       	movw	r24, r16
 898:	0e 94 90 05 	call	0xb20	; 0xb20 <strnlen_P>
 89c:	4c 01       	movw	r8, r24
 89e:	e0 e8       	ldi	r30, 0x80	; 128
 8a0:	de 2e       	mov	r13, r30
 8a2:	df 28       	or	r13, r15
 8a4:	d3 fe       	sbrs	r13, 3
 8a6:	09 c0       	rjmp	.+18     	; 0x8ba <vfprintf+0x1b8>
 8a8:	ee 24       	eor	r14, r14
 8aa:	ff 24       	eor	r15, r15
 8ac:	1b c0       	rjmp	.+54     	; 0x8e4 <vfprintf+0x1e2>
 8ae:	b2 01       	movw	r22, r4
 8b0:	80 e2       	ldi	r24, 0x20	; 32
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 8b8:	ca 94       	dec	r12
 8ba:	8c 2d       	mov	r24, r12
 8bc:	99 27       	eor	r25, r25
 8be:	88 16       	cp	r8, r24
 8c0:	99 06       	cpc	r9, r25
 8c2:	a8 f3       	brcs	.-22     	; 0x8ae <vfprintf+0x1ac>
 8c4:	f1 cf       	rjmp	.-30     	; 0x8a8 <vfprintf+0x1a6>
 8c6:	f8 01       	movw	r30, r16
 8c8:	d7 fc       	sbrc	r13, 7
 8ca:	85 91       	lpm	r24, Z+
 8cc:	d7 fe       	sbrs	r13, 7
 8ce:	81 91       	ld	r24, Z+
 8d0:	8f 01       	movw	r16, r30
 8d2:	b2 01       	movw	r22, r4
 8d4:	99 27       	eor	r25, r25
 8d6:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 8da:	c1 10       	cpse	r12, r1
 8dc:	ca 94       	dec	r12
 8de:	08 94       	sec
 8e0:	e1 1c       	adc	r14, r1
 8e2:	f1 1c       	adc	r15, r1
 8e4:	e8 14       	cp	r14, r8
 8e6:	f9 04       	cpc	r15, r9
 8e8:	71 f7       	brne	.-36     	; 0x8c6 <vfprintf+0x1c4>
 8ea:	10 e0       	ldi	r17, 0x00	; 0
 8ec:	0a c1       	rjmp	.+532    	; 0xb02 <vfprintf+0x400>
 8ee:	94 36       	cpi	r25, 0x64	; 100
 8f0:	11 f0       	breq	.+4      	; 0x8f6 <vfprintf+0x1f4>
 8f2:	99 36       	cpi	r25, 0x69	; 105
 8f4:	99 f5       	brne	.+102    	; 0x95c <vfprintf+0x25a>
 8f6:	f7 fe       	sbrs	r15, 7
 8f8:	0b c0       	rjmp	.+22     	; 0x910 <vfprintf+0x20e>
 8fa:	74 e0       	ldi	r23, 0x04	; 4
 8fc:	67 2e       	mov	r6, r23
 8fe:	71 2c       	mov	r7, r1
 900:	60 0e       	add	r6, r16
 902:	71 1e       	adc	r7, r17
 904:	f8 01       	movw	r30, r16
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	82 81       	ldd	r24, Z+2	; 0x02
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	0e c0       	rjmp	.+28     	; 0x92c <vfprintf+0x22a>
 910:	62 e0       	ldi	r22, 0x02	; 2
 912:	66 2e       	mov	r6, r22
 914:	71 2c       	mov	r7, r1
 916:	60 0e       	add	r6, r16
 918:	71 1e       	adc	r7, r17
 91a:	f8 01       	movw	r30, r16
 91c:	80 81       	ld	r24, Z
 91e:	91 81       	ldd	r25, Z+1	; 0x01
 920:	9c 01       	movw	r18, r24
 922:	b9 01       	movw	r22, r18
 924:	88 27       	eor	r24, r24
 926:	77 fd       	sbrc	r23, 7
 928:	80 95       	com	r24
 92a:	98 2f       	mov	r25, r24
 92c:	1f 2d       	mov	r17, r15
 92e:	1f 76       	andi	r17, 0x6F	; 111
 930:	97 ff       	sbrs	r25, 7
 932:	08 c0       	rjmp	.+16     	; 0x944 <vfprintf+0x242>
 934:	90 95       	com	r25
 936:	80 95       	com	r24
 938:	70 95       	com	r23
 93a:	61 95       	neg	r22
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	10 68       	ori	r17, 0x80	; 128
 944:	7e 01       	movw	r14, r28
 946:	08 94       	sec
 948:	e1 1c       	adc	r14, r1
 94a:	f1 1c       	adc	r15, r1
 94c:	2a e0       	ldi	r18, 0x0A	; 10
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	a7 01       	movw	r20, r14
 952:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__ultoa_invert>
 956:	98 2e       	mov	r9, r24
 958:	9e 18       	sub	r9, r14
 95a:	4e c0       	rjmp	.+156    	; 0x9f8 <vfprintf+0x2f6>
 95c:	95 37       	cpi	r25, 0x75	; 117
 95e:	29 f4       	brne	.+10     	; 0x96a <vfprintf+0x268>
 960:	3f ee       	ldi	r19, 0xEF	; 239
 962:	f3 22       	and	r15, r19
 964:	2a e0       	ldi	r18, 0x0A	; 10
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	22 c0       	rjmp	.+68     	; 0x9ae <vfprintf+0x2ac>
 96a:	49 ef       	ldi	r20, 0xF9	; 249
 96c:	f4 22       	and	r15, r20
 96e:	9f 36       	cpi	r25, 0x6F	; 111
 970:	61 f0       	breq	.+24     	; 0x98a <vfprintf+0x288>
 972:	90 37       	cpi	r25, 0x70	; 112
 974:	20 f4       	brcc	.+8      	; 0x97e <vfprintf+0x27c>
 976:	98 35       	cpi	r25, 0x58	; 88
 978:	09 f0       	breq	.+2      	; 0x97c <vfprintf+0x27a>
 97a:	c8 c0       	rjmp	.+400    	; 0xb0c <vfprintf+0x40a>
 97c:	12 c0       	rjmp	.+36     	; 0x9a2 <vfprintf+0x2a0>
 97e:	90 37       	cpi	r25, 0x70	; 112
 980:	39 f0       	breq	.+14     	; 0x990 <vfprintf+0x28e>
 982:	98 37       	cpi	r25, 0x78	; 120
 984:	09 f0       	breq	.+2      	; 0x988 <vfprintf+0x286>
 986:	c2 c0       	rjmp	.+388    	; 0xb0c <vfprintf+0x40a>
 988:	05 c0       	rjmp	.+10     	; 0x994 <vfprintf+0x292>
 98a:	28 e0       	ldi	r18, 0x08	; 8
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	0f c0       	rjmp	.+30     	; 0x9ae <vfprintf+0x2ac>
 990:	50 e1       	ldi	r21, 0x10	; 16
 992:	f5 2a       	or	r15, r21
 994:	f4 fe       	sbrs	r15, 4
 996:	02 c0       	rjmp	.+4      	; 0x99c <vfprintf+0x29a>
 998:	84 e0       	ldi	r24, 0x04	; 4
 99a:	f8 2a       	or	r15, r24
 99c:	20 e1       	ldi	r18, 0x10	; 16
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	06 c0       	rjmp	.+12     	; 0x9ae <vfprintf+0x2ac>
 9a2:	f4 fe       	sbrs	r15, 4
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <vfprintf+0x2a8>
 9a6:	e6 e0       	ldi	r30, 0x06	; 6
 9a8:	fe 2a       	or	r15, r30
 9aa:	20 e1       	ldi	r18, 0x10	; 16
 9ac:	32 e0       	ldi	r19, 0x02	; 2
 9ae:	f7 fe       	sbrs	r15, 7
 9b0:	0b c0       	rjmp	.+22     	; 0x9c8 <vfprintf+0x2c6>
 9b2:	54 e0       	ldi	r21, 0x04	; 4
 9b4:	65 2e       	mov	r6, r21
 9b6:	71 2c       	mov	r7, r1
 9b8:	60 0e       	add	r6, r16
 9ba:	71 1e       	adc	r7, r17
 9bc:	f8 01       	movw	r30, r16
 9be:	60 81       	ld	r22, Z
 9c0:	71 81       	ldd	r23, Z+1	; 0x01
 9c2:	82 81       	ldd	r24, Z+2	; 0x02
 9c4:	93 81       	ldd	r25, Z+3	; 0x03
 9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <vfprintf+0x2de>
 9c8:	42 e0       	ldi	r20, 0x02	; 2
 9ca:	64 2e       	mov	r6, r20
 9cc:	71 2c       	mov	r7, r1
 9ce:	60 0e       	add	r6, r16
 9d0:	71 1e       	adc	r7, r17
 9d2:	f8 01       	movw	r30, r16
 9d4:	80 81       	ld	r24, Z
 9d6:	91 81       	ldd	r25, Z+1	; 0x01
 9d8:	ac 01       	movw	r20, r24
 9da:	ba 01       	movw	r22, r20
 9dc:	88 27       	eor	r24, r24
 9de:	99 27       	eor	r25, r25
 9e0:	ae 01       	movw	r20, r28
 9e2:	4f 5f       	subi	r20, 0xFF	; 255
 9e4:	5f 4f       	sbci	r21, 0xFF	; 255
 9e6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__ultoa_invert>
 9ea:	9e 01       	movw	r18, r28
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	98 2e       	mov	r9, r24
 9f2:	92 1a       	sub	r9, r18
 9f4:	1f 2d       	mov	r17, r15
 9f6:	1f 77       	andi	r17, 0x7F	; 127
 9f8:	16 fd       	sbrc	r17, 6
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <vfprintf+0x2fe>
 9fc:	d1 2e       	mov	r13, r17
 9fe:	05 c0       	rjmp	.+10     	; 0xa0a <vfprintf+0x308>
 a00:	9e ef       	ldi	r25, 0xFE	; 254
 a02:	d9 2e       	mov	r13, r25
 a04:	d1 22       	and	r13, r17
 a06:	98 14       	cp	r9, r8
 a08:	10 f0       	brcs	.+4      	; 0xa0e <vfprintf+0x30c>
 a0a:	09 2d       	mov	r16, r9
 a0c:	0c c0       	rjmp	.+24     	; 0xa26 <vfprintf+0x324>
 a0e:	2d 2d       	mov	r18, r13
 a10:	33 27       	eor	r19, r19
 a12:	24 ff       	sbrs	r18, 4
 a14:	19 c0       	rjmp	.+50     	; 0xa48 <vfprintf+0x346>
 a16:	22 ff       	sbrs	r18, 2
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <vfprintf+0x31c>
 a1a:	08 2d       	mov	r16, r8
 a1c:	08 c0       	rjmp	.+16     	; 0xa2e <vfprintf+0x32c>
 a1e:	8e ee       	ldi	r24, 0xEE	; 238
 a20:	d8 2e       	mov	r13, r24
 a22:	d1 22       	and	r13, r17
 a24:	08 2d       	mov	r16, r8
 a26:	2d 2d       	mov	r18, r13
 a28:	33 27       	eor	r19, r19
 a2a:	24 ff       	sbrs	r18, 4
 a2c:	0e c0       	rjmp	.+28     	; 0xa4a <vfprintf+0x348>
 a2e:	fe 01       	movw	r30, r28
 a30:	e9 0d       	add	r30, r9
 a32:	f1 1d       	adc	r31, r1
 a34:	80 81       	ld	r24, Z
 a36:	80 33       	cpi	r24, 0x30	; 48
 a38:	19 f4       	brne	.+6      	; 0xa40 <vfprintf+0x33e>
 a3a:	59 ee       	ldi	r21, 0xE9	; 233
 a3c:	d5 22       	and	r13, r21
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <vfprintf+0x350>
 a40:	0f 5f       	subi	r16, 0xFF	; 255
 a42:	22 ff       	sbrs	r18, 2
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <vfprintf+0x350>
 a46:	04 c0       	rjmp	.+8      	; 0xa50 <vfprintf+0x34e>
 a48:	08 2d       	mov	r16, r8
 a4a:	8d 2d       	mov	r24, r13
 a4c:	86 78       	andi	r24, 0x86	; 134
 a4e:	09 f0       	breq	.+2      	; 0xa52 <vfprintf+0x350>
 a50:	0f 5f       	subi	r16, 0xFF	; 255
 a52:	ed 2c       	mov	r14, r13
 a54:	ff 24       	eor	r15, r15
 a56:	e3 fc       	sbrc	r14, 3
 a58:	12 c0       	rjmp	.+36     	; 0xa7e <vfprintf+0x37c>
 a5a:	e0 fe       	sbrs	r14, 0
 a5c:	0d c0       	rjmp	.+26     	; 0xa78 <vfprintf+0x376>
 a5e:	0c 15       	cp	r16, r12
 a60:	08 f0       	brcs	.+2      	; 0xa64 <vfprintf+0x362>
 a62:	58 c0       	rjmp	.+176    	; 0xb14 <vfprintf+0x412>
 a64:	8c 2c       	mov	r8, r12
 a66:	80 1a       	sub	r8, r16
 a68:	89 0c       	add	r8, r9
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <vfprintf+0x384>
 a6c:	b2 01       	movw	r22, r4
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 a76:	0f 5f       	subi	r16, 0xFF	; 255
 a78:	0c 15       	cp	r16, r12
 a7a:	c0 f3       	brcs	.-16     	; 0xa6c <vfprintf+0x36a>
 a7c:	04 c0       	rjmp	.+8      	; 0xa86 <vfprintf+0x384>
 a7e:	0c 15       	cp	r16, r12
 a80:	10 f4       	brcc	.+4      	; 0xa86 <vfprintf+0x384>
 a82:	c0 1a       	sub	r12, r16
 a84:	01 c0       	rjmp	.+2      	; 0xa88 <vfprintf+0x386>
 a86:	cc 24       	eor	r12, r12
 a88:	e4 fe       	sbrs	r14, 4
 a8a:	10 c0       	rjmp	.+32     	; 0xaac <vfprintf+0x3aa>
 a8c:	b2 01       	movw	r22, r4
 a8e:	80 e3       	ldi	r24, 0x30	; 48
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 a96:	e2 fe       	sbrs	r14, 2
 a98:	1e c0       	rjmp	.+60     	; 0xad6 <vfprintf+0x3d4>
 a9a:	e1 fe       	sbrs	r14, 1
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <vfprintf+0x3a2>
 a9e:	88 e5       	ldi	r24, 0x58	; 88
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x3a6>
 aa4:	88 e7       	ldi	r24, 0x78	; 120
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	b2 01       	movw	r22, r4
 aaa:	0c c0       	rjmp	.+24     	; 0xac4 <vfprintf+0x3c2>
 aac:	8d 2d       	mov	r24, r13
 aae:	86 78       	andi	r24, 0x86	; 134
 ab0:	91 f0       	breq	.+36     	; 0xad6 <vfprintf+0x3d4>
 ab2:	e1 fe       	sbrs	r14, 1
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x3b8>
 ab6:	8b e2       	ldi	r24, 0x2B	; 43
 ab8:	01 c0       	rjmp	.+2      	; 0xabc <vfprintf+0x3ba>
 aba:	80 e2       	ldi	r24, 0x20	; 32
 abc:	d7 fc       	sbrc	r13, 7
 abe:	8d e2       	ldi	r24, 0x2D	; 45
 ac0:	b2 01       	movw	r22, r4
 ac2:	99 27       	eor	r25, r25
 ac4:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <vfprintf+0x3d4>
 aca:	b2 01       	movw	r22, r4
 acc:	80 e3       	ldi	r24, 0x30	; 48
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 ad4:	8a 94       	dec	r8
 ad6:	98 14       	cp	r9, r8
 ad8:	c0 f3       	brcs	.-16     	; 0xaca <vfprintf+0x3c8>
 ada:	19 2d       	mov	r17, r9
 adc:	11 50       	subi	r17, 0x01	; 1
 ade:	fe 01       	movw	r30, r28
 ae0:	e1 0f       	add	r30, r17
 ae2:	f1 1d       	adc	r31, r1
 ae4:	81 81       	ldd	r24, Z+1	; 0x01
 ae6:	b2 01       	movw	r22, r4
 ae8:	99 27       	eor	r25, r25
 aea:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 aee:	11 23       	and	r17, r17
 af0:	09 f4       	brne	.+2      	; 0xaf4 <vfprintf+0x3f2>
 af2:	fb ce       	rjmp	.-522    	; 0x8ea <vfprintf+0x1e8>
 af4:	f3 cf       	rjmp	.-26     	; 0xadc <vfprintf+0x3da>
 af6:	b2 01       	movw	r22, r4
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 08 03 	call	0x610	; 0x610 <fputc>
 b00:	11 50       	subi	r17, 0x01	; 1
 b02:	8c 2d       	mov	r24, r12
 b04:	81 95       	neg	r24
 b06:	18 17       	cp	r17, r24
 b08:	b1 f7       	brne	.-20     	; 0xaf6 <vfprintf+0x3f4>
 b0a:	0d ce       	rjmp	.-998    	; 0x726 <vfprintf+0x24>
 b0c:	f2 01       	movw	r30, r4
 b0e:	86 81       	ldd	r24, Z+6	; 0x06
 b10:	97 81       	ldd	r25, Z+7	; 0x07
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <vfprintf+0x416>
 b14:	89 2c       	mov	r8, r9
 b16:	b7 cf       	rjmp	.-146    	; 0xa86 <vfprintf+0x384>
 b18:	e0 e1       	ldi	r30, 0x10	; 16
 b1a:	2b 96       	adiw	r28, 0x0b	; 11
 b1c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__epilogue_restores__+0x4>

00000b20 <strnlen_P>:
 b20:	fc 01       	movw	r30, r24
 b22:	05 90       	lpm	r0, Z+
 b24:	61 50       	subi	r22, 0x01	; 1
 b26:	70 40       	sbci	r23, 0x00	; 0
 b28:	01 10       	cpse	r0, r1
 b2a:	d8 f7       	brcc	.-10     	; 0xb22 <strnlen_P+0x2>
 b2c:	80 95       	com	r24
 b2e:	90 95       	com	r25
 b30:	8e 0f       	add	r24, r30
 b32:	9f 1f       	adc	r25, r31
 b34:	08 95       	ret

00000b36 <strnlen>:
 b36:	fc 01       	movw	r30, r24
 b38:	61 50       	subi	r22, 0x01	; 1
 b3a:	70 40       	sbci	r23, 0x00	; 0
 b3c:	01 90       	ld	r0, Z+
 b3e:	01 10       	cpse	r0, r1
 b40:	d8 f7       	brcc	.-10     	; 0xb38 <strnlen+0x2>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	8e 0f       	add	r24, r30
 b48:	9f 1f       	adc	r25, r31
 b4a:	08 95       	ret

00000b4c <__ultoa_invert>:
 b4c:	fa 01       	movw	r30, r20
 b4e:	aa 27       	eor	r26, r26
 b50:	28 30       	cpi	r18, 0x08	; 8
 b52:	51 f1       	breq	.+84     	; 0xba8 <__ultoa_invert+0x5c>
 b54:	20 31       	cpi	r18, 0x10	; 16
 b56:	81 f1       	breq	.+96     	; 0xbb8 <__ultoa_invert+0x6c>
 b58:	e8 94       	clt
 b5a:	6f 93       	push	r22
 b5c:	6e 7f       	andi	r22, 0xFE	; 254
 b5e:	6e 5f       	subi	r22, 0xFE	; 254
 b60:	7f 4f       	sbci	r23, 0xFF	; 255
 b62:	8f 4f       	sbci	r24, 0xFF	; 255
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	af 4f       	sbci	r26, 0xFF	; 255
 b68:	b1 e0       	ldi	r27, 0x01	; 1
 b6a:	3e d0       	rcall	.+124    	; 0xbe8 <__ultoa_invert+0x9c>
 b6c:	b4 e0       	ldi	r27, 0x04	; 4
 b6e:	3c d0       	rcall	.+120    	; 0xbe8 <__ultoa_invert+0x9c>
 b70:	67 0f       	add	r22, r23
 b72:	78 1f       	adc	r23, r24
 b74:	89 1f       	adc	r24, r25
 b76:	9a 1f       	adc	r25, r26
 b78:	a1 1d       	adc	r26, r1
 b7a:	68 0f       	add	r22, r24
 b7c:	79 1f       	adc	r23, r25
 b7e:	8a 1f       	adc	r24, r26
 b80:	91 1d       	adc	r25, r1
 b82:	a1 1d       	adc	r26, r1
 b84:	6a 0f       	add	r22, r26
 b86:	71 1d       	adc	r23, r1
 b88:	81 1d       	adc	r24, r1
 b8a:	91 1d       	adc	r25, r1
 b8c:	a1 1d       	adc	r26, r1
 b8e:	20 d0       	rcall	.+64     	; 0xbd0 <__ultoa_invert+0x84>
 b90:	09 f4       	brne	.+2      	; 0xb94 <__ultoa_invert+0x48>
 b92:	68 94       	set
 b94:	3f 91       	pop	r19
 b96:	2a e0       	ldi	r18, 0x0A	; 10
 b98:	26 9f       	mul	r18, r22
 b9a:	11 24       	eor	r1, r1
 b9c:	30 19       	sub	r19, r0
 b9e:	30 5d       	subi	r19, 0xD0	; 208
 ba0:	31 93       	st	Z+, r19
 ba2:	de f6       	brtc	.-74     	; 0xb5a <__ultoa_invert+0xe>
 ba4:	cf 01       	movw	r24, r30
 ba6:	08 95       	ret
 ba8:	46 2f       	mov	r20, r22
 baa:	47 70       	andi	r20, 0x07	; 7
 bac:	40 5d       	subi	r20, 0xD0	; 208
 bae:	41 93       	st	Z+, r20
 bb0:	b3 e0       	ldi	r27, 0x03	; 3
 bb2:	0f d0       	rcall	.+30     	; 0xbd2 <__ultoa_invert+0x86>
 bb4:	c9 f7       	brne	.-14     	; 0xba8 <__ultoa_invert+0x5c>
 bb6:	f6 cf       	rjmp	.-20     	; 0xba4 <__ultoa_invert+0x58>
 bb8:	46 2f       	mov	r20, r22
 bba:	4f 70       	andi	r20, 0x0F	; 15
 bbc:	40 5d       	subi	r20, 0xD0	; 208
 bbe:	4a 33       	cpi	r20, 0x3A	; 58
 bc0:	18 f0       	brcs	.+6      	; 0xbc8 <__ultoa_invert+0x7c>
 bc2:	49 5d       	subi	r20, 0xD9	; 217
 bc4:	31 fd       	sbrc	r19, 1
 bc6:	40 52       	subi	r20, 0x20	; 32
 bc8:	41 93       	st	Z+, r20
 bca:	02 d0       	rcall	.+4      	; 0xbd0 <__ultoa_invert+0x84>
 bcc:	a9 f7       	brne	.-22     	; 0xbb8 <__ultoa_invert+0x6c>
 bce:	ea cf       	rjmp	.-44     	; 0xba4 <__ultoa_invert+0x58>
 bd0:	b4 e0       	ldi	r27, 0x04	; 4
 bd2:	a6 95       	lsr	r26
 bd4:	97 95       	ror	r25
 bd6:	87 95       	ror	r24
 bd8:	77 95       	ror	r23
 bda:	67 95       	ror	r22
 bdc:	ba 95       	dec	r27
 bde:	c9 f7       	brne	.-14     	; 0xbd2 <__ultoa_invert+0x86>
 be0:	00 97       	sbiw	r24, 0x00	; 0
 be2:	61 05       	cpc	r22, r1
 be4:	71 05       	cpc	r23, r1
 be6:	08 95       	ret
 be8:	9b 01       	movw	r18, r22
 bea:	ac 01       	movw	r20, r24
 bec:	0a 2e       	mov	r0, r26
 bee:	06 94       	lsr	r0
 bf0:	57 95       	ror	r21
 bf2:	47 95       	ror	r20
 bf4:	37 95       	ror	r19
 bf6:	27 95       	ror	r18
 bf8:	ba 95       	dec	r27
 bfa:	c9 f7       	brne	.-14     	; 0xbee <__ultoa_invert+0xa2>
 bfc:	62 0f       	add	r22, r18
 bfe:	73 1f       	adc	r23, r19
 c00:	84 1f       	adc	r24, r20
 c02:	95 1f       	adc	r25, r21
 c04:	a0 1d       	adc	r26, r0
 c06:	08 95       	ret

00000c08 <__prologue_saves__>:
 c08:	2f 92       	push	r2
 c0a:	3f 92       	push	r3
 c0c:	4f 92       	push	r4
 c0e:	5f 92       	push	r5
 c10:	6f 92       	push	r6
 c12:	7f 92       	push	r7
 c14:	8f 92       	push	r8
 c16:	9f 92       	push	r9
 c18:	af 92       	push	r10
 c1a:	bf 92       	push	r11
 c1c:	cf 92       	push	r12
 c1e:	df 92       	push	r13
 c20:	ef 92       	push	r14
 c22:	ff 92       	push	r15
 c24:	0f 93       	push	r16
 c26:	1f 93       	push	r17
 c28:	cf 93       	push	r28
 c2a:	df 93       	push	r29
 c2c:	cd b7       	in	r28, 0x3d	; 61
 c2e:	de b7       	in	r29, 0x3e	; 62
 c30:	ca 1b       	sub	r28, r26
 c32:	db 0b       	sbc	r29, r27
 c34:	0f b6       	in	r0, 0x3f	; 63
 c36:	f8 94       	cli
 c38:	de bf       	out	0x3e, r29	; 62
 c3a:	0f be       	out	0x3f, r0	; 63
 c3c:	cd bf       	out	0x3d, r28	; 61
 c3e:	09 94       	ijmp

00000c40 <__epilogue_restores__>:
 c40:	2a 88       	ldd	r2, Y+18	; 0x12
 c42:	39 88       	ldd	r3, Y+17	; 0x11
 c44:	48 88       	ldd	r4, Y+16	; 0x10
 c46:	5f 84       	ldd	r5, Y+15	; 0x0f
 c48:	6e 84       	ldd	r6, Y+14	; 0x0e
 c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c50:	aa 84       	ldd	r10, Y+10	; 0x0a
 c52:	b9 84       	ldd	r11, Y+9	; 0x09
 c54:	c8 84       	ldd	r12, Y+8	; 0x08
 c56:	df 80       	ldd	r13, Y+7	; 0x07
 c58:	ee 80       	ldd	r14, Y+6	; 0x06
 c5a:	fd 80       	ldd	r15, Y+5	; 0x05
 c5c:	0c 81       	ldd	r16, Y+4	; 0x04
 c5e:	1b 81       	ldd	r17, Y+3	; 0x03
 c60:	aa 81       	ldd	r26, Y+2	; 0x02
 c62:	b9 81       	ldd	r27, Y+1	; 0x01
 c64:	ce 0f       	add	r28, r30
 c66:	d1 1d       	adc	r29, r1
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	f8 94       	cli
 c6c:	de bf       	out	0x3e, r29	; 62
 c6e:	0f be       	out	0x3f, r0	; 63
 c70:	cd bf       	out	0x3d, r28	; 61
 c72:	ed 01       	movw	r28, r26
 c74:	08 95       	ret

00000c76 <_exit>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <_exit>
